// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RealtyHub.ApiService.Data;

#nullable disable

namespace RealtyHub.ApiService.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("IdentityRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("IdentityRoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityUserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("IdentityUserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Name")
                        .HasMaxLength(180)
                        .HasColumnType("character varying(180)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("IdentityUserToken", (string)null);
                });

            modelBuilder.Entity("RealtyHub.ApiService.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Creci")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(180)
                        .HasColumnType("character varying(180)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(180)
                        .HasColumnType("character varying(180)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(180)
                        .HasColumnType("character varying(180)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique();

                    b.HasIndex("NormalizedUserName")
                        .IsUnique();

                    b.ToTable("IdentityUser", (string)null);
                });

            modelBuilder.Entity("RealtyHub.Core.Models.Cliente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("AtualizadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("AutoridadeEmissora")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DataEmissaoRg")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nacionalidade")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Ocupacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("TipoCliente")
                        .HasColumnType("integer");

                    b.Property<int>("TipoPessoa")
                        .HasColumnType("integer");

                    b.Property<int>("TipoStatusCivil")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("RealtyHub.Core.Models.Condominio", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Andares")
                        .HasColumnType("integer");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("AtualizadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<bool>("PossuiAcademia")
                        .HasColumnType("boolean");

                    b.Property<bool>("PossuiElevador")
                        .HasColumnType("boolean");

                    b.Property<bool>("PossuiPiscina")
                        .HasColumnType("boolean");

                    b.Property<bool>("PossuiPlayground")
                        .HasColumnType("boolean");

                    b.Property<bool>("PossuiSalaoFesta")
                        .HasColumnType("boolean");

                    b.Property<decimal>("TaxaCondominial")
                        .HasColumnType("numeric");

                    b.Property<int>("Unidades")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Condominio", (string)null);
                });

            modelBuilder.Entity("RealtyHub.Core.Models.Contrato", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ArquivoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("AtualizadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("CompradorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DataAssinatura")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEmissao")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataTermino")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataVigencia")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PropostaId")
                        .HasColumnType("bigint");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("VendedorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompradorId");

                    b.HasIndex("PropostaId")
                        .IsUnique();

                    b.HasIndex("VendedorId");

                    b.ToTable("Contrato", (string)null);
                });

            modelBuilder.Entity("RealtyHub.Core.Models.FotoImovel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("AtualizadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Extensao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ImovelId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Miniatura")
                        .HasColumnType("boolean");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImovelId");

                    b.ToTable("FotoImovel", (string)null);
                });

            modelBuilder.Entity("RealtyHub.Core.Models.Imovel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Area")
                        .HasColumnType("double precision");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("AtualizadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("Banheiro")
                        .HasColumnType("integer");

                    b.Property<long>("CondominioId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DetalhesTransacao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ExibirNaHome")
                        .HasColumnType("boolean");

                    b.Property<int>("Garagem")
                        .HasColumnType("integer");

                    b.Property<bool>("Novo")
                        .HasColumnType("boolean");

                    b.Property<string>("NumeroRegistro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Preco")
                        .HasColumnType("numeric");

                    b.Property<int>("Quarto")
                        .HasColumnType("integer");

                    b.Property<string>("RegistroCartorio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TipoImovel")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("VendedorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CondominioId");

                    b.HasIndex("VendedorId");

                    b.ToTable("Imovel", (string)null);
                });

            modelBuilder.Entity("RealtyHub.Core.Models.ModeloContrato", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Extensao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("MostrarNaHome")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ModeloContrato", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a2c16556-5098-4496-ae7a-1f9b6d0e8fcf",
                            Extensao = ".docx",
                            MostrarNaHome = false,
                            Nome = "Modelo de Contrato - PJPJ",
                            Tipo = 1
                        },
                        new
                        {
                            Id = "f7581a63-f4f0-4881-b6ed-6a4100b4182e",
                            Extensao = ".docx",
                            MostrarNaHome = false,
                            Nome = "Modelo de Contrato - PFPF",
                            Tipo = 2
                        },
                        new
                        {
                            Id = "2f4c556d-6850-4b3d-afe9-d7c2bd282718",
                            Extensao = ".docx",
                            MostrarNaHome = false,
                            Nome = "Modelo de Contrato - PFPJ",
                            Tipo = 3
                        },
                        new
                        {
                            Id = "fd7ed50d-8f42-4288-8877-3cb8095370e7",
                            Extensao = ".docx",
                            MostrarNaHome = false,
                            Nome = "Modelo de Contrato - PJPF",
                            Tipo = 4
                        },
                        new
                        {
                            Id = "2824aec3-3219-4d81-a97a-c3b80ca72844",
                            Extensao = ".pdf",
                            MostrarNaHome = true,
                            Nome = "Modelo Padrão",
                            Tipo = 0
                        });
                });

            modelBuilder.Entity("RealtyHub.Core.Models.Pagamento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("AtualizadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("Parcelado")
                        .HasColumnType("boolean");

                    b.Property<long>("PropostaId")
                        .HasColumnType("bigint");

                    b.Property<int>("QuantidadeParcelas")
                        .HasColumnType("integer");

                    b.Property<int>("TipoPagamento")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PropostaId");

                    b.ToTable("Pagamento", (string)null);
                });

            modelBuilder.Entity("RealtyHub.Core.Models.Proposta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AtualizadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("CompradorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DataDeEnvio")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ImovelId")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusProposta")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CompradorId");

                    b.HasIndex("ImovelId");

                    b.ToTable("Proposta", (string)null);
                });

            modelBuilder.Entity("RealtyHub.Core.Models.Visita", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AtualizadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("CompradorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DataVisita")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ImovelId")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusVisita")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompradorId");

                    b.HasIndex("ImovelId");

                    b.ToTable("Visita", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.HasOne("RealtyHub.ApiService.Models.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("RealtyHub.ApiService.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("RealtyHub.ApiService.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("RealtyHub.ApiService.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("RealtyHub.ApiService.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealtyHub.Core.Models.Cliente", b =>
                {
                    b.OwnsOne("RealtyHub.Core.Models.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<long>("ClienteId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Bairro")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("character varying(80)")
                                .HasColumnName("Bairro");

                            b1.Property<string>("Cep")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Cep");

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("character varying(80)")
                                .HasColumnName("Cidade");

                            b1.Property<string>("Complemento")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("character varying(80)")
                                .HasColumnName("Complemento");

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("character varying(80)")
                                .HasColumnName("Estado");

                            b1.Property<string>("Logradouro")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("character varying(80)")
                                .HasColumnName("Logradouro");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Numero");

                            b1.Property<string>("Pais")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("character varying(80)")
                                .HasColumnName("Pais");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Cliente");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.Navigation("Endereco")
                        .IsRequired();
                });

            modelBuilder.Entity("RealtyHub.Core.Models.Condominio", b =>
                {
                    b.OwnsOne("RealtyHub.Core.Models.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<long>("CondominioId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Bairro")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("character varying(80)")
                                .HasColumnName("Bairro");

                            b1.Property<string>("Cep")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Cep");

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("character varying(80)")
                                .HasColumnName("Cidade");

                            b1.Property<string>("Complemento")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("character varying(80)")
                                .HasColumnName("Complemento");

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("character varying(80)")
                                .HasColumnName("Estado");

                            b1.Property<string>("Logradouro")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("character varying(80)")
                                .HasColumnName("Logradouro");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Numero");

                            b1.Property<string>("Pais")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("character varying(80)")
                                .HasColumnName("Pais");

                            b1.HasKey("CondominioId");

                            b1.ToTable("Condominio");

                            b1.WithOwner()
                                .HasForeignKey("CondominioId");
                        });

                    b.Navigation("Endereco")
                        .IsRequired();
                });

            modelBuilder.Entity("RealtyHub.Core.Models.Contrato", b =>
                {
                    b.HasOne("RealtyHub.Core.Models.Cliente", "Comprador")
                        .WithMany()
                        .HasForeignKey("CompradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealtyHub.Core.Models.Proposta", "Proposta")
                        .WithOne("Contrato")
                        .HasForeignKey("RealtyHub.Core.Models.Contrato", "PropostaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealtyHub.Core.Models.Cliente", "Vendedor")
                        .WithMany()
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comprador");

                    b.Navigation("Proposta");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("RealtyHub.Core.Models.FotoImovel", b =>
                {
                    b.HasOne("RealtyHub.Core.Models.Imovel", "Imovel")
                        .WithMany("FotosImovel")
                        .HasForeignKey("ImovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Imovel");
                });

            modelBuilder.Entity("RealtyHub.Core.Models.Imovel", b =>
                {
                    b.HasOne("RealtyHub.Core.Models.Condominio", "Condominio")
                        .WithMany("Imoveis")
                        .HasForeignKey("CondominioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealtyHub.Core.Models.Cliente", "Vendedor")
                        .WithMany("Imoveis")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("RealtyHub.Core.Models.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<long>("ImovelId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Bairro")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("character varying(80)")
                                .HasColumnName("Bairro");

                            b1.Property<string>("Cep")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Cep");

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("character varying(80)")
                                .HasColumnName("Cidade");

                            b1.Property<string>("Complemento")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("character varying(80)")
                                .HasColumnName("Complemento");

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("character varying(80)")
                                .HasColumnName("Estado");

                            b1.Property<string>("Logradouro")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("character varying(80)")
                                .HasColumnName("Logradouro");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Numero");

                            b1.Property<string>("Pais")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("character varying(80)")
                                .HasColumnName("Pais");

                            b1.HasKey("ImovelId");

                            b1.ToTable("Imovel");

                            b1.WithOwner()
                                .HasForeignKey("ImovelId");
                        });

                    b.Navigation("Condominio");

                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("RealtyHub.Core.Models.Pagamento", b =>
                {
                    b.HasOne("RealtyHub.Core.Models.Proposta", "Proposta")
                        .WithMany("Pagamentos")
                        .HasForeignKey("PropostaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proposta");
                });

            modelBuilder.Entity("RealtyHub.Core.Models.Proposta", b =>
                {
                    b.HasOne("RealtyHub.Core.Models.Cliente", "Comprador")
                        .WithMany()
                        .HasForeignKey("CompradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealtyHub.Core.Models.Imovel", "Imovel")
                        .WithMany()
                        .HasForeignKey("ImovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comprador");

                    b.Navigation("Imovel");
                });

            modelBuilder.Entity("RealtyHub.Core.Models.Visita", b =>
                {
                    b.HasOne("RealtyHub.Core.Models.Cliente", "Comprador")
                        .WithMany()
                        .HasForeignKey("CompradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealtyHub.Core.Models.Imovel", "Imovel")
                        .WithMany()
                        .HasForeignKey("ImovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comprador");

                    b.Navigation("Imovel");
                });

            modelBuilder.Entity("RealtyHub.ApiService.Models.User", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("RealtyHub.Core.Models.Cliente", b =>
                {
                    b.Navigation("Imoveis");
                });

            modelBuilder.Entity("RealtyHub.Core.Models.Condominio", b =>
                {
                    b.Navigation("Imoveis");
                });

            modelBuilder.Entity("RealtyHub.Core.Models.Imovel", b =>
                {
                    b.Navigation("FotosImovel");
                });

            modelBuilder.Entity("RealtyHub.Core.Models.Proposta", b =>
                {
                    b.Navigation("Contrato");

                    b.Navigation("Pagamentos");
                });
#pragma warning restore 612, 618
        }
    }
}
