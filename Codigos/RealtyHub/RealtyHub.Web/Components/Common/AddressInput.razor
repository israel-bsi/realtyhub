@using RealtyHub.Core.Models
@using RealtyHub.Core.Services

<MudText Class="mt-6 mb-6" Typo="Typo.h6">Endereço</MudText>

<MudGrid>
    <MudItem lg="2" xs="12" sm="6">
        <MudTextField T="string"
                      Label="CEP"
                      @bind-Value="InputModel.Cep"
                      For="@(() => InputModel.Cep)"
                      Mask="@Utility.Masks.ZipCode"
                      OnBlur="SearchAddressAsync"
                      InputType="InputType.Text" />
    </MudItem>

    <MudItem lg="4" xs="12" sm="6">
        <MudTextField T="string"
                      Label="Logradouro"
                      @bind-Value="InputModel.Logradouro"
                      For="@(() => InputModel.Logradouro)"
                      InputType="InputType.Text" />
    </MudItem>

    <MudItem lg="2" xs="12" sm="6">
        <MudTextField T="string"
                      Label="Número"
                      @bind-Value="InputModel.Numero"
                      For="@(() => InputModel.Numero)"
                      InputType="InputType.Text"
                      MaxLength="10" />
    </MudItem>

    <MudItem lg="4" xs="12" sm="6">
        <MudTextField T="string"
                      Label="Complemento"
                      @bind-Value="InputModel.Complemento"
                      For="@(() => InputModel.Complemento)"
                      InputType="InputType.Text" />
    </MudItem>

    <MudItem lg="3" xs="12" sm="6">
        <MudTextField T="string"
                      Label="Bairro"
                      @bind-Value="InputModel.Bairro"
                      For="@(() => InputModel.Bairro)"
                      InputType="InputType.Text" />
    </MudItem>

    <MudItem lg="3" xs="12" sm="6">
        <MudTextField T="string"
                      Label="Cidade"
                      @bind-Value="InputModel.Cidade"
                      For="@(() => InputModel.Cidade)"
                      InputType="InputType.Text" />
    </MudItem>

    <MudItem lg="3" xs="12" sm="6">
        <MudTextField T="string"
                      Label="Estado"
                      @bind-Value="InputModel.Estado"
                      For="@(() => InputModel.Estado)"
                      InputType="InputType.Text" />
    </MudItem>

    <MudItem lg="3" xs="12" sm="6">
        <MudTextField T="string"
                      Label="País"
                      @bind-Value="InputModel.Pais"
                      For="@(() => InputModel.Pais)"
                      InputType="InputType.Text" />
    </MudItem>
</MudGrid>

@code
{
    [Parameter, EditorRequired]
    public Endereco InputModel { get; set; } = null!;

    [Parameter]
    public EventCallback<Endereco> InputModelChanged { get; set; }

    [CascadingParameter]
    public EditContext CurrentEditContext { get; set; } = null!;

    [Inject]
    public IViaCepService CepService { get; set; } = null!;

    [Inject]
    public ISnackbar Snackbar { get; set; } = null!;

    public async Task SearchAddressAsync(FocusEventArgs focusEventArgs)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(InputModel.Cep))
                return;

            var result = await CepService.GetAddressAsync(InputModel.Cep);
            if (result.Data is null || !result.IsSuccess) return;

            InputModel.Logradouro = result.Data.Logradouro;
            InputModel.Numero = result.Data.Numero;
            InputModel.Complemento = result.Data.Complemento;
            InputModel.Bairro = result.Data.Bairro;
            InputModel.Cidade = result.Data.Cidade;
            InputModel.Estado = result.Data.Estado;
            InputModel.Pais = result.Data.Pais;
            await InputModelChanged.InvokeAsync(InputModel);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnParametersSetAsync();
        await base.OnInitializedAsync();
    }
}
