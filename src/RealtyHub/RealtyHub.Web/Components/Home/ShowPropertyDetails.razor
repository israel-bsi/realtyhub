@page "/imoveis/detalhes/{id:long}"
@using RealtyHub.Core.Handlers
@using RealtyHub.Core.Models
@using RealtyHub.Core.Requests.Properties
<PageTitle>Detalhes</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudCarousel ItemsSource="@InputModel.PropertyPhotos"
                 ShowArrows="true"
                 ShowBullets="true"
                 AutoCycle="false"
                 Style="width: 100%; height: 60vh;"
                 Class="mud-width-full"
                 TData="PropertyPhoto">

        <ItemTemplate>
            <MudImage Src="@($"{Configuration.BackendUrl}/photos/{context.Id}{context.Extension}")"
                      Style="width: 100%; height: 100%"
                      ObjectFit="ObjectFit.Cover" />
        </ItemTemplate>
    </MudCarousel>
</MudGrid>
    
<MudText Typo="Typo.h6">@InputModel.Title</MudText>

@code
{
    [Parameter]
    public long Id { get; set; }

    [Inject]
    public ISnackbar Snackbar { get; set; } = null!;

    [Inject]
    public IPropertyHandler PropertyHandler { get; set; } = null!;

    public Property InputModel { get; set; } = new();
    public bool IsBusy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsBusy = true;
        try
        {
            var request = new GetPropertyByIdRequest { Id = Id };
            var result = await PropertyHandler.GetByIdAsync(request);
            if (result is { IsSuccess: true, Data: not null })
            {
                InputModel = result.Data;
            }
            else
            {
                Snackbar.Add(result.Message ?? string.Empty, Severity.Error);
            }
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
        finally
        {
            IsBusy = false;
        }
    }
}