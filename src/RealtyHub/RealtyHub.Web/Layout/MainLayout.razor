@using Blazored.LocalStorage
@inherits LayoutComponentBase
@inject ILocalStorageService LocalStorage

<MudThemeProvider @ref="_mudThemeProvider"
                  @bind-IsDarkMode="IsDarkMode"
                  Theme="Configuration.Theme" />
<MudSnackbarProvider />
<MudDialogProvider />

<AuthorizeView>
    <Authorized>
        <MudLayout>
            <CascadingValue Value="this">
                <MudAppBar>
                    <MudIconButton Icon="@Icons.Material.Filled.Menu"
                                   Color="Color.Inherit"
                                   Edge="Edge.Start"
                                   OnClick="ToggleDrawer" />
                    RealtyHub
                    <MudSpacer />
                    <MudSwitch Color="Color.Inherit"
                               Value="IsDarkMode"
                               ValueChanged="OnThemeToggled"
                               T="bool"
                               ThumbIcon="@Icons.TwoTone.DarkMode"
                               Class="ma-4"
                               Disabled="DisableMudSwitch" />

                    <MudIconButton Icon="@Icons.Material.Filled.Logout"
                                   Color="Color.Inherit"
                                   Edge="Edge.Start"
                                   OnClick="LogoutAsync" 
                                   Title="Logout" />
                </MudAppBar>
                <MudDrawer @bind-Open="@_isDrawerOpened">
                    <NavMenu />
                </MudDrawer>
                <MudMainContent>
                    <MudContainer Class="mt-4">
                        @Body
                    </MudContainer>
                </MudMainContent>
            </CascadingValue>
        </MudLayout>
    </Authorized>
    <NotAuthorized>
        <LoginRedirect />
    </NotAuthorized>
</AuthorizeView>

@code
{
    public bool SaveState { get; set; }
    public bool IsDarkMode { get; set; }
    public bool DisableMudSwitch { get; set; }
    public bool _isDrawerOpened { get; set; } = true;
    private MudThemeProvider _mudThemeProvider = null!;

    [Inject] public NavigationManager NavigationManager { get; set; } = null!;
    [Inject] public IDialogService DialogService { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var storedTheme = await LocalStorage.GetItemAsync<bool?>("themePreference");
            if (storedTheme.HasValue)
            {
                IsDarkMode = storedTheme.Value;
            }
            else
            {
                IsDarkMode = await _mudThemeProvider.GetSystemPreference();
            }
            await LocalStorage.SetItemAsync<bool?>("themePreference", IsDarkMode);
            StateHasChanged();
        }
        SaveState = true;
    }

    private void ToggleDrawer()
    {
        _isDrawerOpened = !_isDrawerOpened;
        SaveState = true;
    }

    private async Task OnThemeToggled(bool newValue)
    {
        IsDarkMode = newValue;
        if (!SaveState) return;
        await LocalStorage.SetItemAsync("themePreference", IsDarkMode);
        StateHasChanged();
    }

    public void UpdateStatusDark(bool isDarkMode, bool disableMudSwtich)
    {
        IsDarkMode = isDarkMode;
        SaveState = false;
        DisableMudSwitch = disableMudSwtich;
        StateHasChanged();
    }

    public async Task LogoutAsync()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Deseja realmente sair do sistema?" },
            { "ButtonText", "Confirmar" },
            { "ButtonColor", Color.Error }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small
        };
        
        var dialog = await DialogService.ShowAsync<DialogConfirm>("Confirmação", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled) return;
        NavigationManager.NavigateTo("/sair");
    }
}