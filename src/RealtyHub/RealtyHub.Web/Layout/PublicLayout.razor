@using Blazored.LocalStorage
@inherits LayoutComponentBase
@inject ILocalStorageService LocalStorage

<MudThemeProvider @ref="_mudThemeProvider"
                  @bind-IsDarkMode="IsDarkMode"
                  Theme="Configuration.Theme" />
<MudSnackbarProvider />
<MudDialogProvider />
<MudPopoverProvider />

<MudLayout>
    <CascadingValue Value="@Configuration.SrcLogo" Name="LogoCascading">
        <MudAppBar>
            RealtyHub
            <MudButton Class="ml-4"
                       Variant="Variant.Text"
                       Style="color:white"
                       Href="/home">
                Home
            </MudButton>
            <MudButton Class="ml-4"
                       Variant="Variant.Text"
                       Style="color:white"
                       Href="/listar-imoveis">
                Imóveis
            </MudButton>
            <MudSpacer />
            <MudTooltip Text="Realizar login">
                <MudIconButton Class="mr-4"
                               Icon="@Icons.Material.Filled.Login"
                               Color="Color.Inherit"
                               Edge="Edge.Start"
                               Href="/login" />
            </MudTooltip>
            <MudTooltip Text="Registrar-se">
                <MudIconButton Class="mr-4"
                               Icon="@Icons.Material.Filled.PersonAdd"
                               Color="Color.Inherit"
                               Edge="Edge.Start"
                               Href="/comecar" />
            </MudTooltip>
            <MudTooltip Text="Mudar tema">
                <MudSwitch Color="Color.Inherit"
                           Value="IsDarkMode"
                           ValueChanged="OnThemeToggled"
                           T="bool"
                           ThumbIcon="@Icons.Material.TwoTone.DarkMode"
                           Class="ma-4"
                           Disabled="DisableMudSwitch" />
            </MudTooltip>
        </MudAppBar>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
                @Body
            </MudContainer>
        </MudMainContent>
    </CascadingValue>
</MudLayout>

@code
{
    public bool SaveState { get; set; }
    public bool IsDarkMode { get; set; }
    public bool DisableMudSwitch { get; set; }

    private MudThemeProvider _mudThemeProvider = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var storedTheme = await LocalStorage.GetItemAsync<bool?>("themePreference");
            if (storedTheme.HasValue)
            {
                IsDarkMode = storedTheme.Value;
            }
            else
            {
                IsDarkMode = await _mudThemeProvider.GetSystemPreference();
            }
            await LocalStorage.SetItemAsync<bool?>("themePreference", IsDarkMode);
            StateHasChanged();
        }
        Configuration.SrcLogo = IsDarkMode
            ? Configuration.SrcLogos.BlackLogo
            : Configuration.SrcLogos.WhiteLogo;
        SaveState = true;
    }

    private async Task OnThemeToggled(bool newValue)
    {
        IsDarkMode = newValue;
        if (!SaveState) return;
        await LocalStorage.SetItemAsync("themePreference", IsDarkMode);
        StateHasChanged();
    }

    public void UpdateStatusDark(bool isDarkMode, bool disableMudSwtich)
    {
        IsDarkMode = isDarkMode;
        SaveState = false;
        DisableMudSwitch = disableMudSwtich;
        StateHasChanged();
    }
}